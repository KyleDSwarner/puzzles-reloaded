{
  "sourceLanguage" : "en",
  "strings" : {
    "%@_controls" : {

    },
    "%@_description" : {

    },
    "%@_instructions" : {

    },
    "%@_name" : {

    },
    "abcd_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap on a cell to select a cell, then type a letter on your keyboard to enter it. Press Backspace or Space to clear a cell.\n\nTap on a cell to select it, then press the corresponding letter button to add it to the cell. Press the 'clear' icon on the bottom row to empty the selected cell.\n\nLong pressing on a cell and pressing a letter button will add a note to the cell. These marks are ignored by the game and can be leveraged however you wish.\n\nPress the “Marks” button to fill every empty cell with all possible pencil marks."
          }
        }
      }
    },
    "abcd_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place letters in a grid based on a set of rules"
          }
        }
      }
    },
    "abcd_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You're given an empty grid, and several rows of numbers on the side. Your goal is to write a letter in every empty cell, following these rules:\n\n1. The numbers on the edge indicate how many instances of a specific letter appear in that row or column.\n2. Identical letters can not be horizontally or vertically adjacent.\n\nThe inventor of this type is unknown. This puzzle is also known under the names ABCD Puzzle, ABC-Kombi or ABCD-Rätsel."
          }
        }
      }
    },
    "abcd_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "ABCD"
          }
        }
      }
    },
    "abcd_params" : {
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "1. Width, Height\nSize of the grid in squares (excluding the size of the numbers on the edge).\n\n2. Letters\nThe amount of different letters that can appear in the puzzle.\n\n3. Remove clues\nWhen enabled, the difficulty is increased by hiding certain number clues.\n\n4. Allow diagonal touching\nWhen disabled, letters cannot be diagonally adjacent (in addition to letters not being orthogonally adjacent)."
          }
        }
      }
    },
    "ascent_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "There are three ways to enter a number:\n\nTap on a number to highlight it, then tap (or drag to) an adjacent cell to place the next number in the sequence.\n\nIn Edges mode, tap and drag from an edge number, then release in an empty grid cell in the same row, column or diagonal.\n\nTo remove numbers, long press or long-drag a number.\n\nIt's also possible to draw a path while the numbers inside the path are still unknown. Tap and drag across cells to draw a line. Long press or long drag to clear the line going through a cell.\n\nIf a path has only a single number, the endpoints will display one or two smaller numbers, which represent the numbers which are valid for this cell."
          }
        }
      }
    },
    "ascent_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place each number once to create a path."
          }
        }
      }
    },
    "ascent_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You're given a grid, with several numbers inside. Your objective is to place each number exactly once, so a path is formed from the lowest number (i.e. 1) to the highest number. Two numbers that are in sequence must be horizontally, vertically or diagonally adjacent.\n\nThe puzzle can be played on a rectangular or hexagonal grid. It's also possible to play on a rectangular grid while not allowing the path to move diagonally.\n\nIn the alternate game mode 'Edges', the grid is surrounded by numbers placed inside arrows. An arrow points to the row, column or diagonal where this number appears in the path.\n\nThis puzzle is invented by Gyora Benedek, and is known as Hidato (or the non-trademarked name Hidoku). Edges mode is an implementation of 1to25 invented by Jeff Widderich."
          }
        }
      }
    },
    "ascent_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Ascent"
          }
        }
      }
    },
    "blackbox_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To fire a laser beam, tap in a square around the edge of the arena. The results will be displayed immediately. Clicking or holding the left button on one of these squares will highlight the current go (or a previous go) to confirm the exit point for that laser, if applicable.\n\nTo guess the location of a ball, tap within the arena and a black circle will appear marking the guess; click again to remove the guessed ball.\n\nLocations in the arena may be locked against modification by long pressing; whole rows and columns may be similarly locked by long pressing in the laser square above/below that column, or to the left/right of that row.\n\nWhen an appropriate number of balls have been guessed, a button will appear at the top-left corner of the grid; clicking that will check your guesses.\n\nIf you click the ‘check’ button and your guesses are not correct, the game will show you the minimum information necessary to demonstrate this to you, so you can try again. If your ball positions are not consistent with the beam paths you already know about, one beam path will be circled to indicate that it proves you wrong. If your positions match all the existing beam paths but are still wrong, one new beam path will be revealed (written in red) which is not consistent with your current guesses.\n\nIf you decide to give up completely, you can select Solve to reveal the actual ball positions. At this point, correctly-placed balls will be displayed as filled black circles, incorrectly-placed balls as filled black circles with red crosses, and missing balls as filled red circles. In addition, a red circle marks any laser you had already fired which is not consistent with your ball layout (just as when you press the ‘check’ button), and red text marks any laser you could have fired in order to distinguish your ball layout from the correct one."
          }
        }
      }
    },
    "blackbox_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Find the hidden balls in the box by bouncing laser beams off them"
          }
        }
      }
    },
    "blackbox_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A number of balls are hidden in a rectangular arena. You have to deduce the positions of the balls by firing lasers positioned at the edges of the arena and observing how their beams are deflected.\n\nBeams will travel straight from their origin until they hit the opposite side of the arena (at which point they emerge), unless affected by balls in one of the following ways:\n\nA beam that hits a ball head-on is absorbed and will never re-emerge. This includes beams that meet a ball on the first rank of the arena.\nA beam with a ball in its front-left square and no ball ahead of it gets deflected 90 degrees to the right.\nA beam with a ball in its front-right square and no ball ahead of it gets similarly deflected to the left.\nA beam that would re-emerge from its entry location is considered to be ‘reflected’.\nA beam which would get deflected before entering the arena by a ball to the front-left or front-right of its entry point is also considered to be ‘reflected’.\nBeams that are reflected appear as a ‘R’; beams that hit balls head-on appear as ‘H’. Otherwise, a number appears at the firing point and the location where the beam emerges (this number is unique to that shot).\n\nYou can place guesses as to the location of the balls, based on the entry and exit patterns of the beams; once you have placed enough balls a button appears enabling you to have your guesses checked.\n\nFor this reason, when you have your guesses checked, the game will check that your solution produces the same results as the computer's, rather than that your solution is identical to the computer's. So in the above example, you could put the fifth ball at any of the locations marked with an x, and you would still win.\n\nBlack Box was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "blackbox_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Black Box"
          }
        }
      }
    },
    "boats_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to place a boat segment in the grid. Unknown boat segments are represented by a small rectangle, and will automatically change into the correct shape when the surrounding cells are filled in.\n\nLong press to place water, to indicate that a boat cannot be placed here."
          }
        }
      }
    },
    "boats_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Find the fleet in the grid"
          }
        }
      }
    },
    "boats_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You're given a grid, and a list of boats which must be located inside that grid. Boats can be rotated. Two boats cannot be horizontally, vertically or diagonally adjacent.\n\nThe numbers on the side indicate the amount of cells inside that row or column which are occupied by a boat.\n\nSome boat segments are given (corner pieces, centers, or single-length boats), along with their orientation.\n\nAt the bottom of the puzzle is a list of every boat that must be placed in the grid. When a boat is found, it is automatically crossed off of this list. Make sure a boat is surrounded by water on all sides, to indicate that it cannot possibly grow any further.\n\nThis puzzle is best known as Battleships."
          }
        }
      }
    },
    "boats_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Boats"
          }
        }
      }
    },
    "boats_params" : {
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "These parameters are available from the ‘Custom…’ option on the ‘Type’ menu.\n\n- Width, Height: The size of the grid in squares.\n- Fleet size: The size of the largest possible boat.\n- Fleet configuration: Customize the fleet by entering a list of numbers. Each number indicates how many times a boat of a specific size appears. For example, the configuration 3,2,1 represents 3 boats of size 1, 2 boats of size 2, and 1 boat of size 3.\n- Difficulty: Determine the difficulty of the generated puzzle. Higher difficulties require more complex reasoning.\n- Remove numbers: When enabled, the difficulty is increased by hiding certain number clues."
          }
        }
      }
    },
    "bricks_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to shade in a cell. Tapping on a cell again will change its color again to indicate that the field should definitely not be shared to unshade a cell.\n\nYou can also click and drag to place multiple squares.\n"
          }
        }
      }
    },
    "bricks_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Shade several cells in the hexagonal grid while making sure each cell has another shaded cell below it"
          }
        }
      }
    },
    "bricks_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "The objective of this game is to shade some number of cells in the hexagonal grid while following these rules:\n\n1. Each shaded cell must have at least one shaded cell below it (unless it's on the bottom row).\n2. There can’t be 3 or more shaded cells in a horizontal row.\n3. A number indicates the amount of shaded cells around it.\n4. Cells with numbers cannot be shaded.\n\nThis genre was invented by Nikoli under the name Tawamurenga."
          }
        }
      }
    },
    "bricks_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Bricks"
          }
        }
      }
    },
    "bridges_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To place a bridge between two islands, tap on one island and drag it towards the other. You do not need to drag all the way to the other island; you only need to move your finger far enough for the intended bridge direction to be unambiguous.\n\nDoing this again when a bridge is already present will add another parallel bridge. If there are already as many bridges between the two islands as permitted by the current game rules (i.e. two by default), the same dragging action will remove all of them.\n\nIf you want to remind yourself that two islands definitely do not have a bridge between them, you can long press & drag between them in the same way to draw a ‘non-bridge’ marker.\n\nIf you think you have finished with an island (i.e. you have placed all its bridges and are confident that they are in the right places), you can mark the island as finished by tapping on it. This will highlight it and all the bridges connected to it, and you will be prevented from accidentally modifying any of those bridges in future. Tapping again on a highlighted island will unmark it and restore your ability to modify it.\n\nThe “Mark Neighbors” button will draw a grey line between each pair of islands that could be connected with a bridge or non-bridge but are currently not.\n\nViolations of the puzzle rules will be marked in red:\n\n- An island with too many bridges will be highlighted in red.\n\n- An island with too few bridges will be highlighted in red if it is \ndefinitely an error (as opposed to merely not being finished yet): if adding enough bridges would involve having to cross another bridge or remove a non-bridge marker, or if the island has been highlighted as complete.\n\n- A group of islands and bridges may be highlighted in red if it is a closed subset of the puzzle with no way to connect it to the rest of the islands. For example, if you directly connect two 1s together with a bridge and they are not the only two islands on the grid, they will light up red to indicate that such a group cannot be contained in any valid solution.\n\n- If you have selected the (non-default) option to disallow loops in the solution, a group of bridges which forms a loop will be highlighted."
          }
        }
      }
    },
    "bridges_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Connect all the islands with a network of bridges"
          }
        }
      }
    },
    "bridges_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a set of islands distributed across the playing area. Each island contains a number. Your aim is to connect the islands together with bridges, in such a way that:\n\n- Bridges run horizontally or vertically.\n- The number of bridges terminating at any island is equal to the number written in that island.\n- Two bridges may run in parallel between the same two islands, but no more than two may do so.\n- No bridge crosses another bridge.\n- All the islands are connected together.\n\nThere are some configurable alternative modes, which involve changing the parallel-bridge limit to something other than 2, and introducing the additional constraint that no sequence of bridges may form a loop from one island back to the same island. The rules stated above are the default ones.\n\nCredit for this puzzle goes to Nikoli.\n\nBridges was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "bridges_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Bridges"
          }
        }
      }
    },
    "clusters_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to place blue squares. Long press to place red squares. You can also click and drag to place multiple squares."
          }
        }
      }
    },
    "clusters_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the grid with red and blue clusters, with all dead ends given"
          }
        }
      }
    },
    "clusters_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You're given a grid, with several dots inside colored squares. Your objective is to fill every empty space with one of two colors while following these rules:\n\n- Tiles which are adjacent to 1 other tile of the same color are denoted with a dot. All of these tiles are given.\n- All other tiles must be adjacent to 2 or more tiles of the same color.\n\nThis puzzle type was invented by Inaba Naoki under the name クラスター, or literally Kurasuta, which Google Translate names 'Cluster'."
          }
        }
      }
    },
    "clusters_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Clusters"
          }
        }
      }
    },
    "cube_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping anywhere on the window will move the cube (or other solid) in the direction of the tap.\n"
          }
        }
      }
    },
    "cube_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Pick up all the blue squares by rolling the cube over them"
          }
        }
      }
    },
    "cube_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of 16 squares, six of which are blue; on one square rests a cube. Your job is to get all six blue squares on to the six faces of the cube at the same time. Count your moves and try to do it in as few as possible.\n\nTap to roll the cube through 90 degrees so that it moves to an adjacent square. If you roll the cube on to a blue square, the blue square is picked up on one face of the cube; if you roll a blue face of the cube on to a non-blue square, the blueness is put down again. (In general, whenever you roll the cube, the two faces that come into contact swap colors.) \n\nOnce you've mastered the game with a cube rolling on a square grid, you can change to a triangular grid and roll any of a tetrahedron, an octahedron or an icosahedron."
          }
        }
      }
    },
    "cube_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Cube"
          }
        }
      }
    },
    "dominosa_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping between any two adjacent numbers places a domino covering them, or removes one if it is already present. Trying to place a domino which overlaps existing dominoes will remove the ones it overlaps.\n\nLong pressing between two adjacent numbers draws a line between them, which you can use to remind yourself that you know those two numbers are not covered by a single domino. Long pressing again removes the line.\n\nPressing a number key will highlight all occurrences of that number. Pressing that number again will clear the highlighting. Up to two different numbers can be highlighted at any given time."
          }
        }
      }
    },
    "dominosa_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tile the rectangle with a full set of dominoes"
          }
        }
      }
    },
    "dominosa_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A normal set of dominoes – that is, one instance of every (unordered) pair of numbers from 0 to 6 – has been arranged irregularly into a rectangle; then the number in each square has been written down and the dominoes themselves removed. Your task is to reconstruct the pattern by arranging the set of dominoes to match the provided array of numbers.\n\nThis puzzle is widely credited to O. S. Adler, and takes part of its name from those initials."
          }
        }
      }
    },
    "dominosa_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Dominosa"
          }
        }
      }
    },
    "fifteen_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A tap in the row or column containing the empty space will move as many tiles as necessary to move the space to where you tapped.\n\nPressing the “Hint” button will make a suggested move. Pressing it enough times will solve the game, but may scramble your progress while doing so. "
          }
        }
      }
    },
    "fifteen_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Slide the tiles around to arrange them into order"
          }
        }
      }
    },
    "fifteen_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "This is the classic ‘15-puzzle’ with sliding tiles, which dates from the 1870s.\n\nYou have a 4×4 square grid; 15 squares contain numbered tiles, and the sixteenth is empty. Your move is to choose a tile next to the empty space, and slide it into the space. \n\nThe aim is to end up with the tiles in numerical order, with the space in the bottom right (so that the top row reads 1,2,3,4 and the bottom row reads 13,14,15,space)."
          }
        }
      }
    },
    "fifteen_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fifteen"
          }
        }
      }
    },
    "filling_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Filling, tap in any empty square and then type a digit to fill that square. By dragging across the grid, you can select multiple squares to fill with a single value. If you make a mistake, tap n the incorrect square and press clear to empty it (or press the undo button)"
          }
        }
      }
    },
    "filling_description" : {
      "comment" : "Short description for the game 'filling'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Mark every square with the area of its containing region"
          }
        }
      }
    },
    "filling_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares, some of which contain digits, and the rest of which are empty. Your job is to fill in digits in the empty squares, in such a way that each connected region of squares all containing the same digit has an area equal to that digit.\n\n(‘Connected region’, for the purposes of this game, does not count diagonally separated squares as adjacent.)\n\nFor example, it follows that no square can contain a zero, and that two adjacent squares cannot both contain a one. No region has an area greater than 9 (because then its area would not be a single digit).\n\nCredit for this puzzle goes to Nikoli.\n\nFilling was contributed to this collection by Jonas Kölker."
          }
        }
      }
    },
    "filling_name" : {
      "comment" : "Display name for the game 'filling'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Filling"
          }
        }
      }
    },
    "flip_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap in a square to flip it and its associated squares.\n\nIf you use the ‘Solve’ function on this game, it will mark some of the squares in red. If you click once in every square with a red mark, the game should be solved. (If you click in a square without a red mark, a red mark will appear in it to indicate that you will need to reverse that operation to reach the solution.)"
          }
        }
      }
    },
    "flip_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Flip groups of squares to light them all up at once"
          }
        }
      }
    },
    "flip_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares, some light and some dark. Your aim is to light all the squares up at the same time. You can choose any square and flip its state from light to dark or dark to light, but when you do so, other squares around it change state as well.\n\nEach square contains a small diagram showing which other squares change when you flip it."
          }
        }
      }
    },
    "flip_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Flip"
          }
        }
      }
    },
    "flood_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Flood, tap on a square. The top left corner and everything connected to it will be flood-filled with the color of the square you clicked. Clicking a square the same color as the top left corner has no effect, and therefore does not count as a move."
          }
        }
      }
    },
    "flood_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Turn the grid the same colour in as few flood fills as possible"
          }
        }
      }
    },
    "flood_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid of squares, coloured at random in multiple colours. In each move, you can flood-fill the top left square in a colour of your choice (i.e. every square reachable from the starting square by an orthogonally connected path of squares all the same colour will be filled in the new colour). As you do this, more and more of the grid becomes connected to the starting square.\n\nYour aim is to make the whole grid the same colour, in as few moves as possible. The game will set a limit on the number of moves, based on running its own internal solver. You win if you can make the whole grid the same colour in that many moves or fewer."
          }
        }
      }
    },
    "flood_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Flood"
          }
        }
      }
    },
    "galaxies_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap on any grid line to draw an edge if there isn't one already, or to remove one if there is.\n\nWhen you create a valid region (one which is closed, contains exactly one dot, is 180° symmetric about that dot, and contains no extraneous edges between two of its own squares), it will be highlighted automatically; so your aim is to have the whole grid highlighted in that way.\n\nDuring solving, you might know that a particular grid square belongs to a specific dot, but not be sure of where the edges go and which other squares are connected to the dot. In order to mark this so you don't forget, you can long press on the dot and drag, which will create an arrow marker pointing at the dot. Drop that in a square of your choice and it will remind you which dot it's associated with. You can also long press existing arrows to pick them up and move them, or destroy them by dropping them off the edge of the grid. (Also, if you're not sure which dot an arrow is pointing at, you can pick it up and move it around to make it clearer. It will swivel constantly as you drag it, to stay pointed at its parent dot.)"
          }
        }
      }
    },
    "galaxies_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Divide the grid into rotationally symmetric regions each centred on a dot"
          }
        }
      }
    },
    "galaxies_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a rectangular grid containing a number of dots. Your aim is to partition the rectangle into connected regions of squares, in such a way that every region is 180° rotationally symmetric, and contains exactly one dot which is located at its centre of symmetry.\n\nTo enter your solution, you draw lines along the grid edges to mark the boundaries of the regions. The puzzle is complete when the marked lines on the grid are precisely those that separate two squares belonging to different regions.\n\nThis puzzle was invented by Nikoli under the name ‘Tentai Show’; its name is commonly translated into English as ‘Spiral Galaxies’.\n\nGalaxies was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "galaxies_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Galaxies"
          }
        }
      }
    },
    "guess_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Drag a colored peg from the tray on the left-hand side to its required position in the current guess; pegs may also be dragged from current and past guesses to copy them elsewhere. To remove a peg, drag it off its current position to somewhere invalid.\n\nLong pressing in the current guess adds a ‘hold’ marker; pegs that have hold markers will be automatically added to the next guess after marking.\n\nWhen the guess is complete, the smaller feedback pegs will be highlighted; clicking on these will mark the current guess, copy any held pegs to the next guess, and move the ‘current guess’ marker.\n\nIf you correctly position all the pegs the solution will be displayed below; if you run out of guesses (or select ‘Solve’’) the solution will also be revealed."
          }
        }
      }
    },
    "guess_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Guess the hidden combination of colors"
          }
        }
      }
    },
    "guess_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a set of coloured pegs, and have to reproduce a predetermined sequence of them (chosen by the computer) within a certain number of guesses.\n\nEach guess gets marked with the number of correctly-coloured pegs in the correct places (in black), and also the number of correctly-coloured pegs in the wrong places (in white).\n\nThis game is also known (and marketed, by Hasbro, mainly) as a board game ‘Mastermind’, with 6 colours, 4 pegs per row, and 10 guesses. However, this version allows custom settings of number of colours (up to 10), number of pegs per row, and number of guesses.\n\nGuess was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "guess_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Guess"
          }
        }
      }
    },
    "inertia_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Clicking anywhere in the grid will cause the ball to move in the general direction of where you tapped.\n\nIf you use the ‘Solve’ function on this game, the program will compute a path through the grid which collects all the remaining gems and returns to the current position. A hint arrow will appear on the ball indicating the direction in which you should move to begin on this path. If you then move in that direction, the arrow will update to indicate the next direction on the path. You can also press Space to automatically move in the direction of the hint arrow. If you move in a different direction from the one shown by the arrow, arrows will be shown only if the puzzle is still solvable.\n\nIf you do run into a mine and die, you may undo the move and continue playing. The game will keep track of the total number of deaths throughout the game."
          }
        }
      }
    },
    "inertia_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Collect all the gems without running into any of the mines"
          }
        }
      }
    },
    "inertia_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are a small green ball sitting in a grid full of obstacles. Your aim is to collect all the gems without running into any mines.\n\nYou can move the ball in any orthogonal or diagonal direction. Once the ball starts moving, it will continue until something stops it. A wall directly in its path will stop it (but if it is moving diagonally, it will move through a diagonal gap between two other walls without stopping). Also, some of the squares are ‘stops’; when the ball moves on to a stop, it will stop moving no matter what direction it was going in. Gems do not stop the ball; it picks them up and keeps on going.\n\nRunning into a mine is fatal. Even if you picked up the last gem in the same move which then hit a mine, the game will count you as dead rather than victorious.\n\nThis game was originally implemented for Windows by Ben Olmstead, who was kind enough to release his source code on request so that it could be re-implemented for this collection."
          }
        }
      }
    },
    "inertia_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Inertia"
          }
        }
      }
    },
    "keen_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Keen, tap in any empty square and then type a digit on the keyboard to fill that square. If you make a mistake, tap the square again and press the clear button to erase the number (or press the undo button).\n\nIf you long press in a square and then type a number, that number will be entered in the square as a ‘pencil mark’. You can have pencil marks for multiple numbers in the same square. Squares containing filled-in numbers cannot also contain pencil marks.\n\nThe game pays no attention to pencil marks, so exactly what you use them for is up to you: you can use them as reminders that a particular square needs to be re-examined once you know more about a particular number, or you can use them as lists of the possible numbers in a given square, or anything else you feel like.\n\nTo erase a single pencil mark, long press in the square and type the same number again.\n\nAll pencil marks in a square are erased when you enter a number or clear the field.\n\nPressing “Marks” will fill in a full set of pencil marks in every square that does not have a main digit in it."
          }
        }
      }
    },
    "keen_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Complete the latin square in accordance with the arithmetic clues"
          }
        }
      }
    },
    "keen_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a square grid; each square may contain a digit from 1 to the size of the grid. The grid is divided into blocks of varying shape and size, with arithmetic clues written in them. Your aim is to fully populate the grid with digits such that:\n\n1: Each row contains only one occurrence of each digit\n2: Each column contains only one occurrence of each digit\n3: The digits in each block can be combined to form the number stated in the clue, using the arithmetic operation given in the clue. That is:\n\n- An addition clue means that the sum of the digits in the block must be the given number. For example, ‘15+’ means the contents of the block adds up to fifteen.\n- A multiplication clue (e.g. ‘60×’), similarly, means that the product of the digits in the block must be the given number.\n- A subtraction clue will always be written in a block of size two, and it means that one of the digits in the block is greater than the other by the given amount. For example, ‘2−’ means that one of the digits in the block is 2 more than the other, or equivalently that one digit minus the other one is 2. The two digits could be either way round, though.\n- A division clue (e.g. ‘3÷’), similarly, is always in a block of size two and means that one digit divided by the other is equal to the given amount.\n\nNote that a block may contain the same digit more than once (provided the identical ones are not in the same row and column)."
          }
        }
      }
    },
    "keen_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Keen"
          }
        }
      }
    },
    "Key" : {
      "extractionState" : "manual"
    },
    "lightup_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping in a non-black square will toggle the presence of a light in that square. Long pressing g in a non-black square toggles a mark there to aid solving; it can be used to highlight squares that cannot be lit, for example.\n\nYou may not place a light in a marked square, nor place a mark in a lit square.\n\nThe game will highlight obvious errors in red. Lights lit by other lights are highlighted in this way, as are numbered squares which do not (or cannot) have the right number of lights next to them.\n\nThus, the grid is solved when all non-black squares have yellow highlights and there are no red lights."
          }
        }
      }
    },
    "lightup_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place bulbs to light up all the squares"
          }
        }
      }
    },
    "lightup_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares. Some are filled in black; some of the black squares are numbered. Your aim is to ‘light up’ all the empty squares by placing light bulbs in some of them.\n\nEach light bulb illuminates the square it is on, plus all squares in line with it horizontally or vertically unless a black square is blocking the way.\n\nTo win the game, you must satisfy the following conditions:\n\n- All non-black squares are lit.\n- No light is lit by another light.\n- All numbered black squares have exactly that number of lights adjacent to them (in the four squares above, below, and to the side).\n\nNon-numbered black squares may have any number of lights adjacent to them.\n\nCredit for this puzzle goes to Nikoli.\n\nLight Up was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "lightup_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Light Up"
          }
        }
      }
    },
    "loopy_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap on line to turn it black, indicating that you think it is part of the loop. Click again to remove that loop segment (meaning you aren't sure yet).\n\nIf you are sure that a particular line segment is not part of the loop, you can long press to remove it completely. Long pressing a second time will undo this action"
          }
        }
      }
    },
    "loopy_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Draw a single closed loop, given clues about number of adjacent edges"
          }
        }
      }
    },
    "loopy_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid of dots, marked with faint lines to indicate which dots you are allowed to connect directly together. Your aim is to use some subset of those yellow lines to draw a single unbroken loop from dot to dot within the grid.\n\nSome of the spaces between the lines contain numbers. These numbers indicate how many of the lines around that space form part of the loop. The loop you draw must correctly satisfy all of these clues to be considered a correct solution.\n\nIn the default mode, the dots are arranged in a grid of squares; however, you can also play on triangular or hexagonal grids, or even more exotic ones.\n\nCredit for the basic puzzle idea goes to Nikoli.\n\nLoopy was originally contributed to this collection by Mike Pinna, and subsequently enhanced to handle various types of non-square grid by Lambros Lambrou."
          }
        }
      }
    },
    "loopy_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Loopy"
          }
        }
      }
    },
    "magnets_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping on an empty square places a magnet at that position with the positive pole on the square and the negative pole on the other half of the magnet; Tapping again reverses the polarity, and a third click removes the magnet.\n\nLong pressing on an empty square places a blank domino there. Long pressing  again places two question marks on the domino, signifying ‘this cannot be blank’ (which can be useful to note deductions while solving), and long pressing again empties the domino.\n\nTapping on a clue will mark it as done (grey it out), or unmark it if it is already marked."
          }
        }
      }
    },
    "magnets_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place magnets to satisfy the clues and avoid like poles touching"
          }
        }
      }
    },
    "magnets_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A rectangular grid has been filled with a mixture of magnets (that is, dominoes with one positive end and one negative end) and blank dominoes (that is, dominoes with two neutral poles). These dominoes are initially only seen in silhouette. Around the grid are placed a number of clues indicating the number of positive and negative poles contained in certain columns and rows.\n\nYour aim is to correctly place the magnets and blank dominoes such that all the clues are satisfied, with the additional constraint that no two similar magnetic poles may be orthogonally adjacent (since they repel). Neutral poles do not repel, and can be adjacent to any other pole.\n\nCredit for this puzzle goes to Janko.\n\nMagnets was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "magnets_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Magnets"
          }
        }
      }
    },
    "map_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To color a region, tap on an existing region of the desired color and drag that color into the new region.\n\n(The program will always ensure the starting puzzle has at least one region of each color, so that this is always possible!)\n\nIf you need to clear a region, you can drag from an empty region, or from the puzzle boundary if there are no empty regions left.\n\nLong pressing and dragging a color to a region will stipple the region in that color, which you can use as a note to yourself that you think the region might be that color. A region can contain stipples in multiple color at once. (This is often useful at the harder difficulty levels.)\n\nIf you select the “Add Labels” option, the game will toggle display of a number in each region of the map. This is useful if you want to discuss a particular puzzle instance with a friend – having an unambiguous name for each region is much easier than trying to refer to them all by names such as ‘the one down and right of the brown one on the top border’."
          }
        }
      }
    },
    "map_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Color the map so that adjacent regions are never the same color"
          }
        }
      }
    },
    "map_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a map consisting of a number of regions. Your task is to colour each region with one of four colours, in such a way that no two regions sharing a boundary have the same colour. You are provided with some regions already coloured, sufficient to make the remainder of the solution unique, and these cannot be changed.\n\nOnly regions which share a length of border are required to be different colours. Two regions which meet at only one point (i.e. are diagonally separated) may be the same colour.\n\nI believe this puzzle is original; I've never seen an implementation of it anywhere else. The concept of a four-colouring puzzle was suggested by Alexandra Lanes; credit must also go to Nikoli and to Verity Allan for inspiring the train of thought that led to me realising Alex's suggestion was a viable puzzle. Thanks also to Gareth Taylor for many detailed suggestions."
          }
        }
      }
    },
    "map_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Map"
          }
        }
      }
    },
    "mathrax_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to select a cell, then tap a number button to place it in the cell. The clear button will erase your entry.\n\nLong press on a cell then tap a number to add a pencil mark. Pencil marks can be used for any purpose.\n\nPress the 'Marks' button in the game menu to fill every empty cell with all possible pencil marks."
          }
        }
      }
    },
    "mathrax_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place each number according to the arithmetic clues"
          }
        }
      }
    },
    "mathrax_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a square grid; each square may contain a digit from 1 to the size of the grid, and some squares have clues overlapping them. Your objective is to fill the grid with numbers so that no number appears more than once in a row or column, and all clues are satisfied.\n\nThe following clues can appear:\n\n- An 'E' indicates that the four adjacent digits are even.\n- An 'O' indicates that the four adjacent digits are odd.\n- An '=' indicates that diagonally adjacent digits are equal.\n- A number indicates the result of the given operation when applied to each pair of diagonally adjacent digits. (topleft * bottomright) = (topright * bottomleft).\n\nThe inventor of Mathrax is unknown."
          }
        }
      }
    },
    "mathrax_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Mathrax"
          }
        }
      }
    },
    "mathrax_params" : {
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Size (s*s): Size of the grid in squares.\n\nDifficulty :Determine the difficulty of the generated puzzle. Higher difficulties require more complex reasoning.\n\nAddition clues: Allows clues with the addition operation to appear.\n\nSubtraction clues Allows clues with the subtraction operation to appear. Note that clues with a difference of zero are covered by Equality clues instead.\n\nMultiplication clues: Allows clues with the multiplication operation to appear.\n\nDivision clues: Allows clues with the division operation to appear. Note that clues with a ratio of one are covered by Equality clues instead.\n\nEquality clues: Allows clues with equality signs to appear.\n\nEven/odd clues: Allows Even clues and Odd clues to appear."
          }
        }
      }
    },
    "mines_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "If you tap on a covered square, it will be uncovered.\n\nIf you long press in a covered square, it will place a flag which indicates that the square is believed to be a mine. tapping in a marked square will not uncover it, for safety. You can long press esagain to remove a mark placed in error.\n\nIf you tap an uncovered square, it will ‘clear around’ the square. This means: if the square has exactly as many flags surrounding it as it should have mines, then all the covered squares next to it which are not flagged will be uncovered. So once you think you know the location of all the mines around a square, you can use this function as a shortcut to avoid having to click on each of the remaining squares one by one.\n\nIf you uncover a square which has no mines in the surrounding eight squares, then it is obviously safe to uncover those squares in turn, and so on if any of them also has no surrounding mines. This will be done for you automatically; so sometimes when you uncover a square, a whole new area will open up to be explored.\n\nYou can also use the cursor keys to move around the minefield. Pressing the return key in a covered square uncovers it, and in an uncovered square will clear around it (so it acts as the left button), pressing the space bar in a covered square will place a flag (similarly, it acts as the right button).\n\nUndo is available, although you might consider it cheating to use it. If you step on a mine, the program will only reveal the mine in question (unlike most other implementations, which reveal all of them). You can then Undo your fatal move and continue playing if you like. The program will track the number of times you died (and Undo will not reduce that counter), so when you get to the end of the game you know whether or not you did it without making any errors.\n\n(If you really want to know the full layout of the grid, which other implementations will show you after you die, you can always use the Solve menu option.)"
          }
        }
      }
    },
    "mines_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Find all the mines without treading on any of them"
          }
        }
      }
    },
    "mines_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of covered squares, some of which contain mines, but you don't know which. Your job is to uncover every square which does not contain a mine. If you uncover a square containing a mine, you lose. If you uncover a square which does not contain a mine, you are told how many mines are contained within the eight surrounding squares.\n\nThis game needs no introduction; popularised by Windows, it is perhaps the single best known desktop puzzle game in existence.\n\nThis version of it has an unusual property. By default, it will generate its mine positions in such a way as to ensure that you never need to guess where a mine is: you will always be able to deduce it somehow. So you will never, as can happen in other versions, get to the last four squares and discover that there are two mines left but you have no way of knowing for sure where they are."
          }
        }
      }
    },
    "mines_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Mines"
          }
        }
      }
    },
    "mosaic_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Mosaic, tap in a square to change its color. short pressing an empty square will turn it black, and long pressing will turn it white. Keep clicking the same button to cycle through the three possible states for the square.\n\nBy tapping and dragging, you can color multiple cells in a single action."
          }
        }
      }
    },
    "mosaic_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the grid given clues about number of nearby black squares"
          }
        }
      }
    },
    "mosaic_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid of squares, which you must colour either black or white.\n\nSome squares contain clue numbers. Each clue tells you the number of black squares in the 3×3 region surrounding the clue – including the clue square itself.\n\nThis game is variously known in other locations as: ArtMosaico, Count and Darken, Cuenta Y Sombrea, Fill-a-Pix, Fill-In, Komsu Karala, Magipic, Majipiku, Mosaico, Mosaik, Mozaiek, Nampre Puzzle, Nurie-Puzzle, Oekaki-Pix, Voisimage.\n\nMosaic was contributed to this collection by Didi Kohen. Colour design by Michal Shomer. The implementation is loosely based on github.com/mordechaim/Mosaic."
          }
        }
      }
    },
    "mosaic_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Mosaic"
          }
        }
      }
    },
    "net_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "The game view presents a number of control options:\n\n- Clockwise: Tapping a square rotates it clockwise. Long pressing locks the tile\n- Counter-Clockwise: Tapping a square rotates it counter-clockwise. Long pressing locks the tile.\n- Lock/Unlock: Tapping a square locks it and prevents future changes until it is unlocked\n- Center: Tapping and dragging the view changes which tile is used as the 'center' point of the net that is used for grid highlighting (It doesn't ultimately matter which tile this is, as every tile will be connected to every other tile in a correct solution, but it may be helpful in the intermediate stages of solving the puzzle.)\n- Shift: (Only available on wrapping grid puzzles) On grids that wrap, you can move the origin of the grid, so that tiles that were on opposite sides of the grid can be seen together.\n- Shuffle Blocks: Randomly shuffles all non-locked tiles to a random orientation"
          }
        }
      }
    },
    "net_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rotate each tile to reassemble the network"
          }
        }
      }
    },
    "net_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "I originally saw this in the form of a Flash game called FreeNet [1], written by Pavils Jurjans; there are several other implementations under the name NetWalk. The computer prepares a network by connecting up the centres of squares in a grid, and then shuffles the network by rotating every tile randomly. Your job is to rotate it all back into place. The successful solution will be an entirely connected network, with no closed loops. As a visual aid, all tiles which are connected to the one in the middle are highlighted."
          }
        }
      }
    },
    "net_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Net"
          }
        }
      }
    },
    "netslide_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping on an arrow will move the appropriate row or column in the direction indicated. Long pressing on the arrow will move it in the opposite direction."
          }
        }
      }
    },
    "netslide_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Slide a row at a time to reassemble the network"
          }
        }
      }
    },
    "netslide_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "This game combines the grid generation of Net with the movement of Sixteen: you have a Net grid, but instead of rotating tiles back into place you have to slide them into place by moving a whole row at a time."
          }
        }
      }
    },
    "netslide_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Netslide"
          }
        }
      }
    },
    "palisade_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to place an edge. Long press to indicate ‘no edge’. "
          }
        }
      }
    },
    "palisade_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Divide the grid into equal-sized areas in accordance with the clues"
          }
        }
      }
    },
    "palisade_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You're given a grid of squares, some of which contain numbers. Your goal is to subdivide the grid into contiguous regions, all of the same (given) size, such that each square containing a number is adjacent to exactly that many edges (including those between the inside and the outside of the grid).\n\nCredit for this puzzle goes to Nikoli, who call it ‘Five Cells’.\n\nPalisade was contributed to this collection by Jonas Kölker."
          }
        }
      }
    },
    "palisade_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Palisade"
          }
        }
      }
    },
    "pattern_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap in a square to color it black. Long press to color it white. If you make a mistake, you can middle-click, or hold down Shift while clicking with any button, to color the square in the default grey (meaning ‘undecided’) again.\n\nYou can tap to color a vertical or horizontal line of squares black or white at a time (respectively).\n\n\nChanging your selection in the picker from “Black”, “White”, or “Clear” allows you to easily add or erase segments without having to cycle through the list."
          }
        }
      }
    },
    "pattern_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the pattern in the grid, given only the lengths of runs of black squares"
          }
        }
      }
    },
    "pattern_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares, which must all be filled in either black or white. Beside each row of the grid are listed, in order, the lengths of the runs of black squares on that row; above each column are listed, in order, the lengths of the runs of black squares in that column. Your aim is to fill in the entire grid black or white.\n\nI first saw this puzzle form around 1995, under the name ‘nonograms’. I've seen it in various places since then, under different names.\n\nNormally, puzzles of this type turn out to be a meaningful picture of something once you've solved them. However, since this version generates the puzzles automatically, they will just look like random groupings of squares. (One user has suggested that this is actually a good thing, since it prevents you from guessing the colour of squares based on the picture, and forces you to use logic instead.) The advantage, though, is that you never run out of them."
          }
        }
      }
    },
    "pattern_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Pattern"
          }
        }
      }
    },
    "pearl_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap on a grid edge to draw a segment of the loop through that edge, or to remove a segment once it is drawn.\n\nTap & drag through a series of squares to draw more than one segment of the loop in one go. Alternatively, drag over an existing part of the loop to undraw it, or to undraw part of it and then go in a different direction.\n\nLong press on a grid edge to mark it with a cross, indicating that you are sure the loop does not go through that edge. (For instance, if you have decided which of the squares adjacent to a white clue has to be a corner, but don't yet know which way the corner turns, you might mark the one way it can't go with a cross.)"
          }
        }
      }
    },
    "pearl_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Draw a single closed loop, given clues about corner and straight squares"
          }
        }
      }
    },
    "pearl_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares. Your job is to draw lines between the centers of horizontally or vertically adjacent squares, so that the lines form a single closed loop. In the resulting grid, some of the squares that the loop passes through will contain corners, and some will be straight horizontal or vertical lines. (And some squares can be completely empty – the loop doesn't have to pass through every square.)\n\nSome of the squares contain black and white circles, which are clues that the loop must satisfy:\n\nA black circle in a square indicates that that square is a corner, but neither of the squares adjacent to it in the loop is also a corner.\n\nA white circle indicates that the square is a straight edge, but at least one of the squares adjacent to it in the loop is a corner.\n\nIn both cases, the clue only constrains the two squares adjacent in the loop, that is, the squares that the loop passes into after leaving the clue square. The squares that are only adjacent in the grid are not constrained.\n\nCredit for this puzzle goes to Nikoli, who call it ‘Masyu’.\n\nThanks to James Harvey for assistance with the implementation."
          }
        }
      }
    },
    "pearl_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Pearl"
          }
        }
      }
    },
    "pegs_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To move a peg, drag it from its current position to its final position. If the final position is exactly two holes away from the initial position, is currently unoccupied by a peg, and there is a peg in the intervening square, the move will be permitted and the intervening peg will be removed.\n\nVacant spaces which you can move a peg into are marked with holes. A space with no peg and no hole is not available for moving at all: it is an obstacle which you must work around."
          }
        }
      }
    },
    "pegs_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Jump pegs over each other to remove all but one"
          }
        }
      }
    },
    "pegs_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A number of pegs are placed in holes on a board. You can remove a peg by jumping an adjacent peg over it (horizontally or vertically) to a vacant hole on the other side. Your aim is to remove all but one of the pegs initially present.\n\nThis game, best known as ‘Peg Solitaire’, is possibly one of the oldest puzzle games still commonly known."
          }
        }
      }
    },
    "pegs_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Pegs"
          }
        }
      }
    },
    "range_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to paint a square black, or long press to mark a square with a dot to indicate that you are sure it should not be painted black. Repeated tapping either way will cycle the square through the three possible states (filled, dotted or empty) in opposite directions."
          }
        }
      }
    },
    "range_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place black squares to limit the visible distance from each numbered cell"
          }
        }
      }
    },
    "range_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares; some squares contain numbers. Your job is to color some of the squares black, such that several criteria are satisfied:\n\n1: No square with a number is colored black.\n2: No two black squares are adjacent (horizontally or vertically).\nfor any two white squares, there is a path between them using only white squares.\n3: For each square with a number, that number denotes the total number of white squares reachable from that square going in a straight line in any horizontal or vertical direction until hitting a wall or a black square; the square with the number is included in the total (once).\n\nFor instance, a square containing the number one must have four black squares as its neighbors by the last criterion; but then it's impossible for it to be connected to any outside white square, which violates the second to last criterion. So no square will contain the number one.\n\nCredit for this puzzle goes to Nikoli, who have variously called it ‘Kurodoko’, ‘Kuromasu’ or ‘Where is Black Cells’.\n\nRange was contributed to this collection by Jonas Kölker."
          }
        }
      }
    },
    "range_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Range"
          }
        }
      }
    },
    "rectangles_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap any edge to toggle it on or off, or tap and drag to draw an entire rectangle (or line) on the grid in one go (removing any existing edges within that rectangle).\n\nLong pressing and dragging will allow you to erase the contents of a rectangle without affecting its edges.\n\nWhen a rectangle of the correct size is completed, it will be shaded."
          }
        }
      }
    },
    "rectangles_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Divide the grid into rectangles with areas equal to the numbers"
          }
        }
      }
    },
    "rectangles_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares, with numbers written in some (but not all) of the squares. Your task is to subdivide the grid into rectangles of various sizes, such that\n\n1. Every rectangle contains exactly one numbered square\n2. the area of each rectangle is equal to the number written in its numbered square.\n\nCredit for this game goes to the Japanese puzzle magazine Nikoli."
          }
        }
      }
    },
    "rectangles_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rectangles"
          }
        }
      }
    },
    "rome_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap & hold a square, then drag in one of the four directions to place an arrow.\n\nLong press and drag to place a pencil mark. Pencil marks can be used for any purpose."
          }
        }
      }
    },
    "rome_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill the grid with arrows leading to a goal"
          }
        }
      }
    },
    "rome_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You're given a grid that has been divided into areas, containing arrows and one or more goals (represented by circles). Your goal is to fill every empty space with an arrow pointing up, down, left or right while following these rules:\n\n- Every outlined area contains different arrows.\n- Following the arrows must lead to one of the circled goals.\n\nThis type was invented by Nikoli, who name it Roma."
          }
        }
      }
    },
    "rome_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rome"
          }
        }
      }
    },
    "salad_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tap to select a cell, then type a letter or number on your keyboard to enter it. Press Backspace or Space to clear a cell.\n\nPress 'X' to mark a cell as empty, or press 'O' to mark a cell as \"definitely not empty\".\n\nLong press on a cell, then type a letter or number to add a pencil mark. Pencil marks can be used for any purpose. The letter 'X' can also be used to indicate a cell that might be empty.\n\nPress the ‘Marks’ button to fill every empty cell with all possible pencil marks."
          }
        }
      }
    },
    "salad_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place each character once in every row and column. Some squares remain empty"
          }
        }
      }
    },
    "salad_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a square grid; each square may contain a character from A (or 1) to a given maximum. Your objective is to put characters in some of the squares, so each character appears exactly once in each row and column.\n\nThe rules vary depending on the game mode:\n\nABC End View mode: Letters on the edge show which letter appears first when 'looking' into the grid.\n\nNumber Ball mode: Squares with a ball must contain a number. Squares with a cross must remain empty.\n\nNumber Ball was invented by Inaba Naoki.\n\nSubsets was made for this puzzle collection by Lennard Sprong."
          }
        }
      }
    },
    "salad_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Salad"
          }
        }
      }
    },
    "salad_params" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Game mode: Switch between ABC End View and Number Ball mode.\n\nSize (s*s): Size of the grid in squares.\n\nSymbols: The amount of different symbols that appear in each row.\n\nDifficulty: Determine the difficulty of the generated puzzle.\n"
          }
        }
      }
    },
    "samegame_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "If you tap on an unselected region, it becomes selected (possibly clearing the current selection).\n\nIf you tap the selected region, it will be removed (and the rest of the grid shuffled immediately).\n\nIf you long press the selected region, it will be unselected."
          }
        }
      }
    },
    "samegame_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Clear the grid by removing touching groups of the same colour squares"
          }
        }
      }
    },
    "samegame_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of colored squares, which you have to clear by highlighting contiguous regions of more than one colored square; the larger the region you highlight, the more points you get (and the faster you clear the arena).\n\nIf you clear the grid, you win. If you end up with nothing but single squares (i.e., there are no more clickable regions left) you lose.\n\nRemoving a region causes the rest of the grid to shuffle up: blocks that are suspended will fall down (first), and then empty columns are filled from the right.\n\nSame Game was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "samegame_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Same Game"
          }
        }
      }
    },
    "samegame_params" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Width, Height: Size of grid in squares.\n\nNumber. of colors: Number of different colors used to fill the grid; the more colors, the fewer large regions of colors and thus the more difficult it is to successfully clear the grid.\n\nScoring system: Controls the precise mechanism used for scoring. With the default system, ‘(n-2)^2’, only regions of three squares or more will score any points at all. With the alternative ‘(n-1)^2’ system, regions of two squares score a point each, and larger regions score relatively more points.\n\nEnsure solubility: If this option is ticked (the default state), generated grids will be guaranteed to have at least one solution.\nIf you turn it off, the game generator will not try to guarantee soluble grids; it will, however, still ensure that there are at least 2 squares of each colour on the grid at the start (since a grid with exactly one square of a given colour is definitely insoluble). Grids generated with this option disabled may contain more large areas of contiguous colour, leading to opportunities for higher scores; they can also take less time to generate."
          }
        }
      }
    },
    "signpost_controls" : {
      "comment" : "Control Info for the puzzle 'signpost'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Signpost, you connect squares together by dragging from one square to another, indicating that they are adjacent in the sequence. Tap & drag from a square to its successor, or long press & drag from a square to its predecessor.\n\nIf you connect together two squares in this way and one of them has a number in it, the appropriate number will appear in the other square. If you connect two non-numbered squares, they will be assigned temporary algebraic labels: on the first occasion, they will be labelled ‘a’ and ‘a+1’, and then ‘b’ and ‘b+1’, and so on. Connecting more squares on to the ends of such a chain will cause them all to be labelled with the same letter.\n\nWhen you tap or long press in a square, the legal squares to connect it to will be shown.\n\nThe arrow in each square starts off black, and goes grey once you connect the square to its successor. Also, each square which needs a predecessor has a small dot in the bottom left corner, which vanishes once you link a square to it. So your aim is always to connect a square with a black arrow to a square with a dot.\n\nTo remove any links for a particular square (both incoming and outgoing), tap & drag it off the grid. To remove a whole chain, long press & drag any square in the chain off the grid."
          }
        }
      }
    },
    "signpost_description" : {
      "comment" : "Short Description for the puzzle 'signpost'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Connect the squares into a path following the arrows"
          }
        }
      }
    },
    "signpost_instructions" : {
      "comment" : "Instructions for the puzzle 'signpost'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares; Each square (except the last one) contains an arrow, and some squares also contain numbers. \n\nYour job is to connect the squares to form a continuous list of numbers starting at 1 and linked in the direction of the arrows – so the arrow inside the square with the number 1 will point to the square containing the number 2, which will point to the square containing the number 3, etc. Each square can be any distance away from the previous one, as long as it is somewhere in the direction of the arrow.\n\nBy convention the first and last numbers are shown; one or more interim numbers may also appear at the beginning.\n\nCredit for this puzzle goes to Janko, who call it ‘Pfeilpfad’ (‘arrow path’).\n\nSignpost was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "signpost_name" : {
      "comment" : "Display name for the puzzle 'signpost'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Signpost"
          }
        }
      }
    },
    "singles_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping on an empty square will color it black; Tapping again will restore the number. Long pressing will add a circle (useful for indicating that a cell is definitely not black). Tapping outside the grid will toggle whether black squares completely hide the numbers on them, or display them in dark grey.\n"
          }
        }
      }
    },
    "singles_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Black out the right set of duplicate numbers"
          }
        }
      }
    },
    "singles_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of white squares, all of which contain numbers. Your task is to color some of the squares black (removing the number) so as to satisfy all of the following conditions:\n\n- No number occurs more than once in any row or column.\n- No black square is horizontally or vertically adjacent to any other black square.\n- The remaining white squares must all form one contiguous region (connected by edges, not just touching at corners).\n\nCredit for this puzzle goes to Nikoli who call it Hitori.\n\nSingles was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "singles_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Singles"
          }
        }
      }
    },
    "sixteen_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping on an arrow will move the appropriate row or column in the direction indicated. Long pressing on the arrow will move it in the opposite direction.\n"
          }
        }
      }
    },
    "sixteen_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Slide a row at a time to arrange the tiles into order"
          }
        }
      }
    },
    "sixteen_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "A sliding tile puzzle, visually similar to Fifteen but with a different type of move. \n\nAll 16 squares on the grid contain numbered squares. Your move is to shift an entire row left or right, or shift an entire column up or down; every time you do that, the tile you shift off the grid re-appears at the other end of the same row, in the space you just vacated. To win, arrange the tiles into numerical order (1,2,3,4 on the top row, 13,14,15,16 on the bottom). When you've done that, try playing on different sizes of grid."
          }
        }
      }
    },
    "sixteen_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Sixteen"
          }
        }
      }
    },
    "slant_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping in a blank square will place a slash in it (a line leaning to the left, i.e. running from the top left of the square to the bottom right). Long pressing in a blank square will add a line in the opposite direction (leaning to the right, running from top right to bottom left).\n\nContinuing to click either button will cycle between the three possible square contents. "
          }
        }
      }
    },
    "slant_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Draw a maze of slanting lines that matches the clues"
          }
        }
      }
    },
    "slant_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares. Your aim is to draw a diagonal line through each square, and choose which way each line slants so that the following conditions are met:\n\n- The diagonal lines never form a loop.\n- Any point with a circled number has precisely that many lines meeting at it. \n\nThus, a 4 is the centre of a cross shape, whereas a zero is the centre of a diamond shape – or rather, a partial diamond shape, because a zero can never appear in the middle of the grid because that would immediately cause a loop."
          }
        }
      }
    },
    "slant_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Slant"
          }
        }
      }
    },
    "solo_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Solo, simply tap in any empty square and then type a digit or letter on the keyboard to fill that square. If you make a mistake, tap the square again and press the Clear button to remove the guess (or use the Undo feature).\n\nIf you long press in a square and then type a number, that number will be entered in the square as a ‘pencil mark’. You can have pencil marks for multiple numbers in the same square. Squares containing filled-in numbers cannot also contain pencil marks.\n\nThe game pays no attention to pencil marks, so exactly what you use them for is up to you: you can use them as reminders that a particular square needs to be re-examined once you know more about a particular number, or you can use them as lists of the possible numbers in a given square, or anything else you feel like.\n\nTo erase a single pencil mark, long press in the square and type the same number again.\n\nAll pencil marks in a square are erased when you enter a guess or when you clear the square."
          }
        }
      }
    },
    "solo_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the grid so that each row, column and square block contains one of every digit"
          }
        }
      }
    },
    "solo_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a square grid, which is divided into as many equally sized sub-blocks as the grid has rows. Each square must be filled in with a digit from 1 to the size of the grid, in such a way that:\n\n- Every row contains only one occurrence of each digit\n- Every column contains only one occurrence of each digit\n- Every block contains only one occurrence of each digit.\n- (Optionally, by default off) each of the square's two main diagonals contains only one occurrence of each digit.\n\nYou are given some of the numbers as clues; your aim is to place the rest of the numbers correctly.\n\nUnder the default settings, the sub-blocks are square or rectangular. The default puzzle size is 3×3 (a 9×9 actual grid, divided into nine 3×3 blocks). You can also select sizes with rectangular blocks instead of square ones, such as 2×3 (a 6×6 grid divided into six 3×2 blocks). Alternatively, you can select ‘jigsaw’ mode, in which the sub-blocks are arbitrary shapes which differ between individual puzzles.\n\nAnother available mode is ‘killer’. In this mode, clues are not given in the form of filled-in squares; instead, the grid is divided into ‘cages’ by coloured lines, and for each cage the game tells you what the sum of all the digits in that cage should be. Also, no digit may appear more than once within a cage, even if the cage crosses the boundaries of existing regions.\n\nIf you select a puzzle size which requires more than 9 digits, the additional digits will be letters of the alphabet. For example, if you select 3×4 then the digits which go in your grid will be 1 to 9, plus ‘a’, ‘b’ and ‘c’. This cannot be selected for killer puzzles.\n\nThis puzzle was first seen from Nioli but has been popularized by various newspapers under the name “Sudoku” or Su Doku’. \n\nHoward Garns is considered the inventor of the modern form of the puzzle, and it was first published in Dell Pencil Puzzles and Word Games."
          }
        }
      }
    },
    "solo_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Solo"
          }
        }
      }
    },
    "solo_params" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Solo allows you to configure two separate dimensions of the puzzle grid on the ‘Type’ menu: the number of columns, and the number of rows, into which the main grid is divided. (The size of a block is the inverse of this: for example, if you select 2 columns and 3 rows, each actual block will have 3 columns and 2 rows.)\n\nIf you tick the ‘X’ checkbox, Solo will apply the optional extra constraint that the two main diagonals of the grid also contain one of every digit. (This is sometimes known as ‘Sudoku-X’ in newspapers.) In this mode, the squares on the two main diagonals will be shaded slightly so that you know it's enabled.\n\nIf you tick the ‘Jigsaw’ checkbox, Solo will generate randomly shaped sub-blocks. In this mode, the actual grid size will be taken to be the product of the numbers entered in the ‘Columns’ and ‘Rows’ boxes. There is no reason why you have to enter a number greater than 1 in both boxes; Jigsaw mode has no constraint on the grid size, and it can even be a prime number if you feel like it.\n\nIf you tick the ‘Killer’ checkbox, Solo will generate a set of of cages, which are randomly shaped and drawn in an outline of a different colour. Each of these regions contains a smaller clue which shows the digit sum of all the squares in this region.\n\nYou can also configure the type of symmetry shown in the generated puzzles. More symmetry makes the puzzles look prettier but may also make them easier, since the symmetry constraints can force more clues than necessary to be present. Completely asymmetric puzzles have the freedom to contain as few clues as possible.\n\nFinally, you can configure the difficulty of the generated puzzles. Difficulty levels are judged by the complexity of the techniques of deduction required to solve the puzzle: each level requires a mode of reasoning which was not necessary in the previous one. In particular, on difficulty levels ‘Trivial’ and ‘Basic’ there will be a square you can fill in with a single number at all times, whereas at ‘Intermediate’ level and beyond you will have to make partial deductions about the set of squares a number could be in (or the set of numbers that could be in a square). At ‘Unreasonable’ level, even this is not enough, and you will eventually have to make a guess, and then backtrack if it turns out to be wrong.\n\nGenerating difficult puzzles is itself difficult: if you select one of the higher difficulty levels, Solo may have to make many attempts at generating a puzzle before it finds one hard enough for you. Be prepared to wait, especially if you have also configured a large puzzle size."
          }
        }
      }
    },
    "spokes_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To draw a line, tap and drag from one hub to another. You can mark a dot as unused by long pressing & dragging between two hubs."
          }
        }
      }
    },
    "spokes_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Connect all hubs using horizontal, vertical and diagonal lines"
          }
        }
      }
    },
    "spokes_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid filled with hubs with numbers on them. Your objective is to draw lines between them while following these rules:\n\n- You can only draw a line starting from a hub's point. If there is no point visible, you cannot draw a line.\n- Only one line can be drawn between two hubs.\n- The number indicates the amount of lines starting from a hub.\n- Lines cannot cross each other.\n- All hubs must form a single connected group.\n\nThe inventor of this puzzle type is unknown."
          }
        }
      }
    },
    "spokes_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Spokes"
          }
        }
      }
    },
    "sticks_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To place a line, tap & drag horizontally or vertically inside a cell.\n\nTo place a line without dragging, short tap to add a vertical line, and long press to add a horizontal one."
          }
        }
      }
    },
    "sticks_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the grid with horizontal and vertical line segments"
          }
        }
      }
    },
    "sticks_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid with several black cells. Fill every blank cell with a line, which connects two cell edges and goes horizontally or vertically through the center of the cell. The lines must follow these rules:\n\n1. A number overlapping a line indicates the length of that line.\n2. A line can't overlap more than one number.\n\nNumbers in black cells indicate the amount of lines connected to the cell.\n\nThis puzzle type was invented by Nikoli, and is known as Tatebo-Yokobo."
          }
        }
      }
    },
    "sticks_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Sticks"
          }
        }
      }
    },
    "sticks_params" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "These parameters are available from the ‘Custom…’ option on the ‘Type’ menu.\n\n- Width, Height: Size of the grid in squares.\n- percentage of black squares: Rough percentage of black squares in the grid.\n- Symmetry: Allows you to specify the required symmetry of the black squares in the grid."
          }
        }
      }
    },
    "subsets_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Every letter has a fixed position in each set.  Taps rotate between adding the letter for that square, or marking it as a known empty square."
          }
        }
      }
    },
    "subsets_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place each set once, in accordance with the subset clues"
          }
        }
      }
    },
    "subsets_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid and a list of sets. Place every set into the grid exactly once. Some sets are given.\n\nA horseshoe symbol ⊃ points from a superset to a subset. In other words, the set on the open end must contain every letter in the set on the closed rounded end.\n\nAll possible horseshoe symbols are given. This means that each set must contain a letter that doesn't appear in the adjacent set, if there is no symbol between them.\n\nThis puzzle type was invented by Inaba Naoki under the name サブセットリンク, released as a Java Applet with a puzzle generator.\n\nSubsets was made for this puzzle collection by Lennard Sprong."
          }
        }
      }
    },
    "subsets_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Subsets"
          }
        }
      }
    },
    "subsets_params" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Custom parameters are not yet supported by this game."
          }
        }
      }
    },
    "tents_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping in a blank square will place a tent in it. Long pressing in a blank square will color it green, indicating that you are sure it isn't a tent. Clicking either button in an occupied square will clear it.\n\nIf you long press and drag across the grid, every blank square in the region you cover will be turned green, and no other squares will be affected. (This is useful for clearing the remainder of a row once you have placed all its tents.)"
          }
        }
      }
    },
    "tents_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place a tent next to each tree"
          }
        }
      }
    },
    "tents_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a grid of squares, some of which contain trees. Your aim is to place tents in some of the remaining squares, in such a way that the following conditions are met:\n\n- There are exactly as many tents as trees.\n- The tents and trees can be matched up in such a way that each tent is directly adjacent (horizontally or vertically, but not diagonally) to its own tree. However, a tent may be adjacent to other trees as well as its own.\n- No two tents are adjacent horizontally, vertically or diagonally.\n- The number of tents in each row, and in each column, matches the numbers given round the sides of the grid.\n\nThis puzzle can be found in several places on the Internet, and was brought to my attention by e-mail. I don't know who I should credit for inventing it."
          }
        }
      }
    },
    "tents_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tents"
          }
        }
      }
    },
    "towers_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Towers, simply tap in any empty square and then type a digit to fill that square with a tower of the given height. If you make a mistake, tap the incorrect square and press the Clear button to erase (or press the undo button).\n\nIf you long-press in a square and then type a number, that number will be entered in the square as a ‘pencil mark’. You can have pencil marks for multiple numbers in the same square. A square containing a tower cannot also contain pencil marks.\n\nThe game pays no attention to pencil marks, so exactly what you use them for is up to you: you can use them as reminders that a particular square needs to be re-examined once you know more about a particular number, or you can use them as lists of the possible numbers in a given square, or anything else you feel like.\n\nTo erase a single pencil mark, long-press in the square and type the same number again.\n\nAll pencil marks in a square are erased when you tap and type a number, or when  you clear the field.\n\nSelecting “Marks” will fill in a full set of pencil marks in every square that does not have a main digit in it.\n\nTapping on a clue will mark it as done (grey it out), or unmark it if it is already marked."
          }
        }
      }
    },
    "towers_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Complete the latin square of towers in accordance with the clues"
          }
        }
      }
    },
    "towers_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a square grid. On each square of the grid you can build a tower, with its height ranging from 1 to the size of the grid. Around the edge of the grid are some numeric clues.\n\nYour task is to build a tower on every square, in such a way that:\n\n1. Each row contains every possible height of tower once\n2. Each column contains every possible height of tower once\n\nEach numeric clue describes the number of towers that can be seen if you look into the square from that direction, assuming that shorter towers are hidden behind taller ones. \n\nFor example, in a 5×5 grid, a clue marked ‘5’ indicates that the five tower heights must appear in increasing order (otherwise you would not be able to see all five towers), whereas a clue marked ‘1’ indicates that the tallest tower (the one marked 5) must come first.\nIn harder or larger puzzles, some towers will be specified for you as well as the clues round the edge, and some edge clues may be missing.\n\nThis puzzle appears on the web under various names, particularly ‘Skyscrapers’, but I don't know who first invented it."
          }
        }
      }
    },
    "towers_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Towers"
          }
        }
      }
    },
    "tracks_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tapping on an edge between two squares adds a track segment between the two squares. Long pressing on an edge adds a cross on the edge, indicating no track is possible there.\n\nTapping in a square adds a color indicator showing that you know the square must contain a track, even if you don't know which edges it crosses yet. Long pressing in a square adds a cross indicating it contains no track segment.\n\nDragging between squares allows you to lay a straight line of is-track or is-not-track indicators, useful for filling in rows or columns to match the clue."
          }
        }
      }
    },
    "tracks_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the railway track according to the clues"
          }
        }
      }
    },
    "tracks_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid of squares, some of which are filled with train tracks. You need to complete the track from A to B so that the rows and columns contain the same number of track segments as are indicated in the clues to the top and right of the grid.\n\nThere are only straight and 90 degree curved rails, and the track may not cross itself.\n\nTracks was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "tracks_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Tracks"
          }
        }
      }
    },
    "twiddle_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Twiddle, tap in the centre of the square group you wish to rotate. In the basic mode, you rotate a 2×2 square, which means you have to click at a corner point where four tiles meet.\n\nIn more advanced modes you might be rotating 3×3 or even more at a time; if the size of the square is odd then you simply click in the centre tile of the square you want to rotate.\n\nTapping rotates the group counter-clockwise. Long pressing rotates it clockwise."
          }
        }
      }
    },
    "twiddle_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Rotate the tiles around themselves to arrange them into order"
          }
        }
      }
    },
    "twiddle_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Twiddle is a tile-rearrangement puzzle, visually similar to Sixteen (see chapter 6): you are given a grid of square tiles, each containing a number, and your aim is to arrange the numbers into ascending order.\n\nIn basic Twiddle, your move is to rotate a square group of four tiles about their common centre. (Orientation is not significant in the basic puzzle, although you can select it.) On more advanced settings, you can rotate a larger square group of tiles.\n\nThis type of puzzle was first seen in the GameCube game ‘Metroid Prime 2’. In the Main Gyro Chamber in that game, there is a puzzle you solve to unlock a door, which is a special case of Twiddle. I developed this game as a generalization of that puzzle."
          }
        }
      }
    },
    "twiddle_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Twiddle"
          }
        }
      }
    },
    "undead_controls" : {
      "comment" : "Control info for the game 'undead'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Undead, tap in any empty square and press the button corresponding to the creature you believe is in that square: ghost, vampire, or zombie.\n\nIf you make a mistake, tap the square again and click the ‘clear’ button to erase it (or use the Undo feature).\n\nIf you long press in a square and then type a letter or number, the corresponding monster will be shown in reduced size in that square, as a ‘pencil mark’. You can have pencil marks for multiple monsters in the same square. A square containing a full-size monster cannot also contain pencil marks.\n\nThe game pays no attention to pencil marks, so exactly what you use them for is up to you: you can use them as reminders that a particular square needs to be re-examined once you know more about a particular monster, or you can use them as lists of the possible monster in a given square, or anything else you feel like.\n\nTo erase a single pencil mark, long press in the square and type the same letter or number again.\n\nAll pencil marks in a square are erased when you enter a guess in or clear the square\n\nTapping on a clue will mark it as done (grey it out), or unmark it if it is already marked."
          }
        }
      }
    },
    "undead_description" : {
      "comment" : "Short description for the game 'undead'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Place ghosts, vampires and zombies so that the right numbers of them can be seen in mirrors"
          }
        }
      }
    },
    "undead_instructions" : {
      "comment" : "Instructions for the game 'undead'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid of squares, some of which contain diagonal mirrors. Every square which is not a mirror must be filled with one of three types of undead monster: a ghost, a vampire, or a zombie.\n\nVampires can be seen directly, but are invisible when reflected in mirrors. Ghosts are the opposite way round: they can be seen in mirrors, but are invisible when looked at directly. Zombies are visible by any means.\n\nYou are also told the total number of each type of monster in the grid. Also around the edge of the grid are written numbers, which indicate how many monsters can be seen if you look into the grid along a row or column starting from that position. (The diagonal mirrors are reflective on both sides. If your reflected line of sight crosses the same monster more than once, the number will count it each time it is visible, not just once.)\n\nThis puzzle type was invented by David Millar, under the name ‘Haunted Mirror Maze’.\n\nUndead was contributed to this collection by Steffen Bauer."
          }
        }
      }
    },
    "undead_name" : {
      "comment" : "Display name for the game 'undead'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Undead"
          }
        }
      }
    },
    "unequal_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Unequal, tap in any empty square and then type a digit or letter to fill that square. If you make a mistake, select that square again and press the clear button to erase it (or use the undo button).\n\nIf you long press in a square and then type a number, that number will be entered in the square as a ‘pencil mark’. You can have pencil marks for multiple numbers in the same square. Squares containing filled-in numbers cannot also contain pencil marks.\n\nThe game pays no attention to pencil marks, so exactly what you use them for is up to you: you can use them as reminders that a particular square needs to be re-examined once you know more about a particular number, or you can use them as lists of the possible numbers in a given square, or anything else you feel like.\n\nTo erase a single pencil mark, long press in the square and type the same number again.\n\nAll pencil marks in a square are erased when you enter a guess in the square or when the square is cleared.\n\nTapping on a clue will mark it as done (grey it out), or unmark it if it is already marked."
          }
        }
      }
    },
    "unequal_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Complete the latin square in accordance with the > signs"
          }
        }
      }
    },
    "unequal_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You have a square grid; each square may contain a digit from 1 to the size of the grid, and some squares have clue signs between them. Your aim is to fully populate the grid with numbers such that:\n\n- Each row contains only one occurrence of each digit\n- Each column contains only one occurrence of each digit\n- All the clue signs are satisfied.\n\nThere are two modes for this game, ‘Unequal’ and ‘Adjacent’.\n\nIn ‘Unequal’ mode, the clue signs are greater-than symbols indicating one square's value is greater than its neighbour's. In this mode not all clues may be visible, particularly at higher difficulty levels.\n\nIn ‘Adjacent’ mode, the clue signs are bars indicating one square's value is numerically adjacent (i.e. one higher or one lower) than its neighbour. In this mode all clues are always visible: absence of a bar thus means that a square's value is definitely not numerically adjacent to that neighbour's.\n\nIn ‘Trivial’ difficulty level (available via the ‘Custom’ game type selector), there are no greater-than signs in ‘Unequal’ mode; the puzzle is to solve the Latin square only.\n\nAt the time of writing, the ‘Unequal’ mode of this puzzle is appearing in the Guardian weekly under the name ‘Futoshiki’.\n\nUnequal was contributed to this collection by James Harvey."
          }
        }
      }
    },
    "unequal_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Unequal"
          }
        }
      }
    },
    "unruly_controls" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To play Unruly, tap to change its color. Tapping an empty square will turn it black, and Long pressing will turn it white. Keep clicking the same button to cycle through the three possible states for the square."
          }
        }
      }
    },
    "unruly_description" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Fill in the black and white grid to avoid runs of three"
          }
        }
      }
    },
    "unruly_instructions" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a grid of squares, which you must colour either black or white. Some squares are provided as clues; the rest are left for you to fill in. Each row and column must contain the same number of black and white squares, and no row or column may contain three consecutive squares of the same colour.\n\nThis puzzle type was invented by Adolfo Zanellati, under the name ‘Tohu wa Vohu’. \n\nUnruly was contributed to this collection by Lennard Sprong."
          }
        }
      }
    },
    "unruly_name" : {
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Unruly"
          }
        }
      }
    },
    "untangle_controls" : {
      "comment" : "Description of controls for the game 'untangle'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "To move a point, tap & hold it and drag it into a new position."
          }
        }
      }
    },
    "untangle_description" : {
      "comment" : "Short Description for the game 'untangle'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Reposition the points so that the lines do not cross"
          }
        }
      }
    },
    "untangle_instructions" : {
      "comment" : "Game instructions for 'untangle'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "You are given a number of points, some of which have lines drawn between them. You can move the points about arbitrarily; your aim is to position the points so that no line crosses another.\n\nThis game was originally found in the form of a Flash game called Planarity, written by John Tantalo."
          }
        }
      }
    },
    "untangle_name" : {
      "comment" : "Display name for the game 'untangle'",
      "extractionState" : "manual",
      "localizations" : {
        "en" : {
          "stringUnit" : {
            "state" : "translated",
            "value" : "Untangle"
          }
        }
      }
    }
  },
  "version" : "1.0"
}